# (attempt at) a mkmf.template for tstorms_driver on SE3 Mazama
#  HPC.
# principal author: Mark R. Yoder, Ph.D.
#                   mryoder@stanford.edu
#
# This can be looked at as a template... to use this template strategy for compiling.
#. the idea is to have a simple Makefile, then use at template like this for each compute
#. environment to fill in all the variables. The problem is that it does not load modules and
#. do other things, so since it can't do the whole job, we end up with a three document compile
# system; it's easier to just put all of this into the compile script.
#. So, this will be left here as an example of how things are done, but we won't import it.
#
# Moudle scripts should be setting these as env variables. Can we just not set them?
#.  there's a bit of a syntax to setting the variables explicitly from the system
#FC=ifort
#CC=icc
#LD=xild
LD=ifort
#
#MPIFC=mpiifort
#MPILD=mpiifort
#MPICC=mpiicc
#MPICXX=mpiicc
#
#
# NetCDF bits (should include hdf5 as well):
# ... but some of these won't work... because NCAR decided they shouldn't? nc-config --fflags,
#   for example, runs from command-line or for ./configure but returns a "not ok for cmake" when
#   run from a bash script. maybe it works for a t/c shell?
#  NOTE: the --cflags and --clibs might be working; should test each one... or just not trust
#   that they will be available in the furure (aka, as per discussion with Martin of MiMA project).
#  ... but apparently this *should* work, and I seem to have done something to make it work, so let's go with it for now.
NETCDF_FFLAGS := $(shell nc-config --fflags)
NETCDF_FLIBS  := $(shell nc-config --flibs)
NETCDF_CFLAGS := $(shell nc-config --cflags)
NETCDF_CLIBS  := $(shell nc-config --libs)
#
# To construct NetCDF Flags, Libs manually:
#NETCDF_FFLAGS=-I$(NETCDF_FORTRAN_INC) -I${NETCDF_FORTRAN_LIB}
#NETCDF_CFLAGS=-I${NETCDF_INC} -I${HDF5_DIR}/include
#
#NETCDF_CLIBS=-L${NETCDF_LIB}
#NETCDF_clibs=-lnetcdf
#NETCDF_FLIBS=-L${NETCDF_CLIBS} -L${NETCDF_FORTRAN_LIB} -L${HDF5_DIR}/lib
#NETCDF_flibs= -lnetcdff -lm
#NETCDF_FLIBS=-L${NETCDF_LIB} -L${NETCDF_FORTRAN_LIB} -L${HDF5_DIR}/lib -lnetcdf -lnetcdff -lm
#
# MPI bits:
# best, consistent ways to get these bits from the compiler???
#MPI_INC := $(shell mpif90 -showme:compiler)
#LIB_MPI := $(shell mpif90 -showme:link)
MPI_INC=$(MPI_DIR)/include
MPI_LIB=$(MPI_DIR)/lib
#
# NCO:
# We'll need to put this into a module...
#NCO_INC=${SCRATCH}/.local/intel_19_1_0_166/mpich_3_3_1/nco-4.9.2/include
#NCO_LIB=${SCRATCH}/.local/intel_19_1_0_166/mpich_3_3_1/nco-4.9.2/lib
NCO_INC=${NCO_DIR}/include
NCO_LIB=${NCO_DIR}/lib
#
# NOTE: this *is* in LD_LIBRARY_PATH, as it should be, but we still get the error. maybe a tcsh issue...
# when we use ld or ixld, not ifort, as the linker, we get a "can't find -limf" linking error. When we include this as a -L path, we get different erros.
#. let's try using ifort as the linker?
#IMF_LIB=/opt/ohpc/pub/intel/compilers_and_libraries_2020.0.166/linux/compiler/lib/intel64_lin
#
# Put it together:
#FFLAGS=$(CPPFLAGS) -fltconsistency -stack_temps -safe_cray_ptr -ftz -i_dynamic -assume byterecl -g -i4 -r8 -O2 -nowarn -Wp,-w
#LDFLAGS=-limf -lm -lpthread -lrt -lnetcdff -lnetcdf -lhdf5 -lhdf5_hl
#
CPPFLAGS=-I/usr/local/include -I/usr/include ${NETCDF_CFLAGS} -I${NCO_INC}
FFLAGS=${NETCDF_FFLAGS} -I${NCO_INC} -I${NCO_LIB} -I${MPI_INC} -I${MPI_LIB} -I/usr/local/include -I/usr/include -fltconsistency -stack_temps -safe_cray_ptr -ftz -assume byterecl -g -i4 -r8 -O2 -nowarn -Wp,-w
#
LDFLAGS=${NETCDF_FLIBS} ${NETCDF_CLIBS} -L${NCO_LIB} -L${MPI_LIB} -lpthread -limf
CFLAGS=-D__IFC
#


